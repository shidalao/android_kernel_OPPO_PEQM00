name: build kernel - OPPO Reno6
on:
  watch:
    types: [started]
  workflow_dispatch:
  
jobs:
  build-kernel:
    name: Build Kernel by ${{ github.actor }}
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
    steps:
      - uses: actions/checkout@v3     
      - name: Prepare Configuration
        run: |
          echo "KERNEL_SOURCE=$(cat config_6877.env | grep -w "KERNEL_SOURCE" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "KERNEL_SOURCE_BRANCH=$(cat config_6877.env | grep -w "KERNEL_SOURCE_BRANCH" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "KERNEL_CONFIG=$(cat config_6877.env | grep -w "KERNEL_CONFIG" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "KERNEL_IMAGE_NAME=$(cat config_6877.env | grep -w "KERNEL_IMAGE_NAME" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "ARCH=$(cat config_6877.env | grep -w "ARCH" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "EXTRA_CMDS=$(cat config_6877.env | grep -w "EXTRA_CMDS" | head -n 1 | cut -d ":" -f 2)" >> $GITHUB_ENV
          echo "USE_CUSTOM_CLANG=$(cat config_6877.env | grep -w "USE_CUSTOM_CLANG" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "CUSTOM_CLANG_SOURCE=$(cat config_6877.env | grep -w "CUSTOM_CLANG_SOURCE" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "CUSTOM_CLANG_BRANCH=$(cat config_6877.env | grep -w "CUSTOM_CLANG_BRANCH" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "CUSTOM_CMDS=$(cat config_6877.env | grep -w "CUSTOM_CMDS" | head -n 1 | cut -d ":" -f 2)" >> $GITHUB_ENV
          echo "CLANG_BRANCH=$(cat config_6877.env | grep -w "CLANG_BRANCH" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "CLANG_VERSION=$(cat config_6877.env | grep -w "CLANG_VERSION" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "ENABLE_GCC_ARM64=$(cat config_6877.env | grep -w "ENABLE_GCC_ARM64" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "ENABLE_GCC_ARM32=$(cat config_6877.env | grep -w "ENABLE_GCC_ARM32" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "ENABLE_KERNELSU=$(cat config_6877.env | grep -w "ENABLE_KERNELSU" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "KERNELSU_TAG=$(cat config_6877.env | grep -w "KERNELSU_TAG" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "ADD_KPROBES_CONFIG=$(cat config_6877.env | grep -w "ADD_KPROBES_CONFIG" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "DISABLE-LTO=$(cat config_6877.env | grep -w "DISABLE-LTO" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "ADD_OVERLAYFS_CONFIG=$(cat config_6877.env | grep -w "ADD_OVERLAYFS_CONFIG" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "DISABLE_CC_WERROR=$(cat config_6877.env | grep -w "DISABLE_CC_WERROR" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "ENABLE_CCACHE=$(cat config_6877.env | grep -w "ENABLE_CCACHE" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "NEED_DTBO=$(cat config_6877.env | grep -w "NEED_DTBO" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "BUILD_BOOT_IMG=$(cat config_6877.env | grep -w "BUILD_BOOT_IMG" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "SOURCE_BOOT_IMAGE=$(cat config_6877.env | grep -w "SOURCE_BOOT_IMAGE" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "KSU_EXPECTED_SIZE=$(cat config_6877.env | grep -w "KSU_EXPECTED_SIZE" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "KSU_EXPECTED_HASH=$(cat config_6877.env | grep -w "KSU_EXPECTED_HASH" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
      
      - name: Setup build kernel environment
        run: |
          echo "BUILD_TIME=$(TZ=Asia/Shanghai date "+%Y%m%d%H%M")" >> $GITHUB_ENV
          echo "DEVICE=$(echo ${{ env.KERNEL_CONFIG }} | sed 's!vendor/!!;s/_defconfig//;s/_user//;s/-perf//')" >> $GITHUB_ENV
          sudo apt-get update
          sudo apt-get install ccache libncurses5-dev libncurses-dev libssl-dev device-tree-compiler bc cpio lib32ncurses5-dev lib32z1 build-essential binutils bc bison build-essential ccache curl flex g++-multilib gcc-multilib git gnupg gperf imagemagick lib32ncurses5-dev lib32readline-dev lib32z1-dev liblz4-tool libncurses5 libncurses5-dev libsdl1.2-dev libssl-dev libxml2 libxml2-utils lzop pngcrush rsync schedtool squashfs-tools xsltproc zip zlib1g-dev git aria2 -y
          mkdir -p $GITHUB_WORKSPACE/kernel_workspace
 
      - name: Download Clang-aosp
        if: env.USE_CUSTOM_CLANG == 'false'
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace
          mkdir clang-aosp
          # Check if CLANG_BRANCH starts with "android"
            if [[ "${CLANG_BRANCH}" == "android"* ]]; then
              echo "CLANG_BRANCH starts with 'android'."
              wget https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/${{ env.CLANG_BRANCH }}/clang-${{ env.CLANG_VERSION }}.tar.gz
            else
              echo "CLANG_BRANCH does not start with 'android'."
              https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/${{ env.CLANG_BRANCH }}/clang-${{ env.CLANG_VERSION }}.tar.gz
            fi        
          tar -C clang-aosp/ -zxvf clang-${{ env.CLANG_VERSION }}.tar.gz

      - name: Download Custom-Clang
        if: env.USE_CUSTOM_CLANG == 'true'
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace
          if [[ ${{ env.CUSTOM_CLANG_SOURCE }} =~ git ]]; then
              if [[ ${{ env.CUSTOM_CLANG_SOURCE }} == *'.tar.gz' ]]; then
                  wget -O clang.tar.gz ${{ env.CUSTOM_CLANG_SOURCE }}
                  mkdir clang-aosp
                  tar -C clang-aosp/ -zxvf clang.tar.gz
              else
                  git clone ${{ env.CUSTOM_CLANG_SOURCE }} -b ${{ env.CUSTOM_CLANG_BRANCH }} clang-aosp --depth=1
              fi        
          else
              wget -O clang.zip ${{ env.CUSTOM_CLANG_SOURCE }}
              mkdir clang-aosp
              unzip clang.zip -d clang-aosp/
          fi

      - name: Download Gcc-LineageOS
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace
          if [ ${{ env.ENABLE_GCC_ARM64 }} = true ]; then
              mkdir gcc-64
              # wget -O gcc-aarch64.tar.gz https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/+archive/refs/tags/android-12.1.0_r27.tar.gz
              # tar -C gcc-64/ -zxvf gcc-aarch64.tar.gz
              git clone --depth=1 https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_aarch64_aarch64-linux-android-4.9 gcc-64
              echo "GCC_64=CROSS_COMPILE=$GITHUB_WORKSPACE/kernel_workspace/gcc-64/bin/aarch64-linux-android-" >> $GITHUB_ENV
          fi

          if [ ${{ env.ENABLE_GCC_ARM32 }} = true ]; then
              mkdir gcc-32
              # wget -O gcc-arm.tar.gz https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9/+archive/refs/tags/android-12.1.0_r27.tar.gz
              # tar -C gcc-32/ -zxvf gcc-arm.tar.gz
              git clone --depth=1 https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_arm_arm-linux-androideabi-4.9 gcc-32

              echo "GCC_32=CROSS_COMPILE_ARM32=$GITHUB_WORKSPACE/kernel_workspace/gcc-32/bin/arm-linux-androideabi-" >> $GITHUB_ENV
          fi

      - name: Download mkbootimg tools
        if: env.BUILD_BOOT_IMG == 'true'
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace
          git clone https://android.googlesource.com/platform/system/tools/mkbootimg tools -b master-kernel-build-2022 --depth=1

      - name: Download kernel source
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace
          git clone ${{ env.KERNEL_SOURCE }} -b ${{ env.KERNEL_SOURCE_BRANCH }} android-kernel --depth=1
      
      - name: Pull kernel vendor source
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace
          git clone https://github.com/oppo-source/android_kernel_modules_oppo_mtk_4.19/
          cp android_kernel_modules_oppo_mtk_4.19/vendor ./ -R
          mkdir -p -v ../vnd
          cp android_kernel_modules_oppo_mtk_4.19/vendor ../vnd -R
          cp android_kernel_modules_oppo_mtk_4.19/vendor/oplus/kernel_4.19/audio/ ./android-kernel/sound/soc/codecs -R -v
      
      - name: Sync KernelSU
        run: |
          export KBUILD_BUILD_USER=${{ github.actor }}
          cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
          bash setup.sh
        
      - name: Download source boot image
        if: env.BUILD_BOOT_IMG == 'true'
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace
          wget -O boot-source.img ${{ env.SOURCE_BOOT_IMAGE }}
          if [ -f boot-source.img ]; then
              echo "FORMAT_MKBOOTING=$(echo `tools/unpack_bootimg.py --boot_img=boot-source.img --format mkbootimg`)" >> $GITHUB_ENV
              echo "HAVE_SOURCE_BOOT_IMAGE=true" >> $GITHUB_ENV
          fi

      - name: Setup KernelSU
        if: env.ENABLE_KERNELSU == 'true'
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
          curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s ${{ env.KERNELSU_TAG }}
          echo "UPLOADNAME=-KernelSU" >> $GITHUB_ENV

      - name: Setup Configuration for Kernel
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
          if [ ${{ env.ADD_KPROBES_CONFIG }} = true ]; then
              echo "CONFIG_MODULES=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
              echo "CONFIG_KPROBES=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
              echo "CONFIG_HAVE_KPROBES=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
              echo "CONFIG_KPROBE_EVENTS=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
          fi
          if [ ${{ env.ADD_OVERLAYFS_CONFIG }} = true ]; then
              echo "CONFIG_OVERLAY_FS=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
          fi
          if [ ${{ env.DISABLE-LTO }} = true ]; then
              sed -i 's/CONFIG_LTO=y/CONFIG_LTO=n/' arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
              sed -i 's/CONFIG_LTO_CLANG=y/CONFIG_LTO_CLANG=n/' arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
              sed -i 's/CONFIG_THINLTO=y/CONFIG_THINLTO=n/' arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
              echo "CONFIG_LTO_NONE=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
          fi
          if [ ${{ env.DISABLE_CC_WERROR }} = true ]; then
              echo "CONFIG_CC_WERROR=n" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
          fi
      
      - name: Setup ccache
        if: env.ENABLE_CCACHE == 'true'
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: build-kernel-${{ env.DEVICE }}${{ env.UPLOADNAME }}
          max-size: 8G
          
      - name: Build KernelSU kernel - OPPO Reno 6
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
          bash build_kernel.sh

      - name: Check a kernel output files
        run: |
         cd $GITHUB_WORKSPACE/kernel_workspace
         if [ -f android-kernel/out/arch/${{ env.ARCH }}/boot/${{ env.KERNEL_IMAGE_NAME }} ]; then
             echo "CHECK_FILE_IS_OK=true" >> $GITHUB_ENV
         else
             echo "Kernel output file is empty"
             exit 1
         fi
         if [ ${{ env.NEED_DTBO }} = true ]; then
             if [ -f android-kernel/out/arch/${{ env.ARCH }}/boot/dtbo.img ]; then
                 echo "CHECK_DTBO_IS_OK=true" >> $GITHUB_ENV
             else
                 echo "DTBO image is empty"
                 exit 1
             fi
         fi
  
      - name: Make Anykernel3
        if: env.CHECK_FILE_IS_OK == 'true'
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace
          git clone https://github.com/osm0sis/AnyKernel3
          sed -i 's/do.devicecheck=1/do.devicecheck=0/g' AnyKernel3/anykernel.sh
          sed -i 's!block=/dev/block/platform/omap/omap_hsmmc.0/by-name/boot;!block=auto;!g' AnyKernel3/anykernel.sh
          sed -i 's/is_slot_device=0;/is_slot_device=auto;/g' AnyKernel3/anykernel.sh
          cp android-kernel/out/arch/${{ env.ARCH }}/boot/${{ env.KERNEL_IMAGE_NAME }} AnyKernel3/
          if [ ${{ env.CHECK_DTBO_IS_OK }} = true ]; then
              cp android-kernel/out/arch/${{ env.ARCH }}/boot/dtbo.img AnyKernel3/
          fi
          rm -rf AnyKernel3/.git* AnyKernel3/README.md

      - name: Make boot image
        if: env.HAVE_SOURCE_BOOT_IMAGE == 'true' && env.CHECK_FILE_IS_OK == 'true'
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace
          tools/unpack_bootimg.py --boot_img boot-source.img
          cp android-kernel/out/arch/${{ env.ARCH }}/boot/${{ env.KERNEL_IMAGE_NAME }} out/kernel
          tools/mkbootimg.py ${{ env.FORMAT_MKBOOTING }} -o boot.img
          if [ -f boot.img ]; then
              echo "MAKE_BOOT_IMAGE_IS_OK=true" >> $GITHUB_ENV
          else
              echo "Boot image is empty"
              exit 1
          fi


      - name: Upload ${{ env.KERNEL_IMAGE_NAME }}
        if: env.CHECK_FILE_IS_OK == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.KERNEL_IMAGE_NAME }}${{ env.UPLOADNAME }}-${{ env.DEVICE }}-${{ env.BUILD_TIME }}
          path: kernel_workspace/android-kernel/out/arch/${{ env.ARCH }}/boot/${{ env.KERNEL_IMAGE_NAME }}

      - name: Upload AnyKernel3
        if: env.CHECK_FILE_IS_OK == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: AnyKernel3${{ env.UPLOADNAME }}-${{ env.DEVICE }}-${{ env.BUILD_TIME }}
          path: kernel_workspace/AnyKernel3/*

      - name: Upload DTBO image
        if: env.CHECK_DTBO_IS_OK == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: dtbo-${{ env.DEVICE }}-${{ env.BUILD_TIME }}
          path: kernel_workspace/android-kernel/out/arch/${{ env.ARCH }}/boot/dtbo.img

      - name: Upload boot image
        if: env.MAKE_BOOT_IMAGE_IS_OK == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: boot${{ env.UPLOADNAME }}-${{ env.DEVICE }}-${{ env.BUILD_TIME }}
          path: kernel_workspace/boot.img

